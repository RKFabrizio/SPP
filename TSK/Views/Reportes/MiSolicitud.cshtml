
@{
    ViewData["Title"] = "MiSolicitud";
    Layout = "~/Views/Shared/_LayoutApp.cshtml";
}

<style>
    .user-icon-container {
        display: flex;
        align-items: center;
    }

        .user-icon-container .icon-tabler {
            margin-right: 10px;
            width: 50px;
            height: 50px;
        }

        .user-icon-container .page-title {
            margin-left: -4px;
        }

    .page-title {
        color: #a79a66;
    }

</style>

@section PagePreTitle{

    <div class="col">
        <!-- Page pre-title -->
        <div class="user-icon-container">
           <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-file-pencil" width="32" height="32" viewBox="0 0 24 24" stroke-width="1.5" stroke="#a79a66" fill="none" stroke-linecap="round" stroke-linejoin="round">
              <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
              <path d="M14 3v4a1 1 0 0 0 1 1h4" />
              <path d="M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z" />
              <path d="M10 18l5 -5a1.414 1.414 0 0 0 -2 -2l-5 5v2h2z" />
            </svg>
            <h2 class="page-title">
                Mis Solicitudes
            </h2>
        </div>
    </div>
}

@section PageActions{


}


@(Html.DevExtreme().DataGrid<SPP.Models.Entity.Pago>()
    .DataSource(ds => ds.Mvc()
        .Controller("PagoMiSolicitud")
        .LoadAction("Get")
        .Key("IdPago")
    )
    .OnRowClick("onGridRowClick")
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.IdPago).Caption("Nro de Solicitud").Width(120);

        columns.AddFor(m => m.IdTipoAdelanto).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("TipoAdelantosLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).Caption("Tipo de Solicitud").Width(125);

        columns.AddFor(m => m.IdProveedor).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("ProveedoresLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).Caption("Proveedor").Width(250);

        columns.AddFor(m => m.IdTipoMoneda).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("TipoMonedasLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).Caption("Moneda").Width(80);

        columns.AddFor(m => m.Importe).Caption("Importe").DataType(GridColumnDataType.Number).Format(c => c
            .Type(Format.FixedPoint)
            .Precision(2)
        ).Width(120);

        columns.AddFor(m => m.Concepto).Width(200);

        columns.AddFor(m => m.LoginSolicitante).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("UsuariosLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).Caption("Solicitante");

        columns.AddFor(m => m.LoginAprobador).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("AprobadorAreasLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).Caption("Aprobador");

        columns.AddFor(m => m.IdEstado).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("EstadosLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Estado");

        columns.AddFor(m => m.IdTipoPago).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("TipoPagosLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).HidingPriority(8).Caption("Tipo Pago");

        columns.AddFor(m => m.Observaciones).HidingPriority(1);

        columns.AddFor(m => m.InformacionContable).HidingPriority(2).Caption("Información Contable");

        columns.AddFor(m => m.CuentaBancaria).HidingPriority(3).Caption("Cuenta Bancaria");

        columns.AddFor(m => m.BeneficiarioNombre).HidingPriority(4).Caption("Beneficiario Nombre");

        columns.AddFor(m => m.IdBanco).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("BancosLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).HidingPriority(5).Caption("Banco");

        columns.AddFor(m => m.IdTipoCuenta).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("TipoCuentasLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).HidingPriority(6).Caption("Tipo Cuenta");

        columns.AddFor(m => m.ReferenciaOC)
                      .HidingPriority(7)
                      .Caption("ReferenciaOC")
                      .CellTemplate(@<text>

                          <a href="#" onclick="descargarPDF()">Descargar</a>

                      </text>);

        columns.AddFor(m => m.ProformaCotizacion)
          .HidingPriority(9)
          .Caption("ProformaCotizacion")
          .CellTemplate(@<text>

              <a href="#" onclick="descargarPDF1()">Descargar</a>

          </text>);

        columns.AddFor(m => m.Factura)
          .HidingPriority(10)
          .Caption("Factura")
          .CellTemplate(@<text>

              <a href="#" onclick="descargarPDF2()">Descargar</a>

          </text>);


    })

    .ShowBorders(true)
            .AllowColumnReordering(true)
            .RowAlternationEnabled(false)
            .ShowColumnLines(true)
            .ShowRowLines(true)
            .Paging(paging => paging.PageSize(20))
            .FilterRow(f => f.Visible(true))
            .Pager(pager =>
            {
                pager.ShowPageSizeSelector(true);
                pager.AllowedPageSizes(new[] { 20, 50, 100 });
                pager.ShowInfo(true);
            })
            .SearchPanel(s => s
                .Visible(true)
                .HighlightCaseSensitive(true)
            )
)

<script>
    var rowData;
    var rowData2;
    var rowData3;

    function onGridRowClick(e) {
        rowData = e.data.ReferenciaOC;
        rowData2 = e.data.ProformaCotizacion;
        rowData3 = e.data.Factura;

    }

 
    function descargarPDF() {
        $.ajax({
            url: '@Url.Action("OpenPdf", "Pagoes")', // Reemplaza "TuControlador" con el nombre real de tu controlador
            type: 'GET',
            data: { pago: rowData },
            success: function (result) {
                var blob = new Blob([result], { type: 'application/txt' });

                // Verificar el navegador y crear un enlace para descargar el archivo
                if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                    // Para Internet Explorer o Microsoft Edge
                    window.navigator.msSaveOrOpenBlob(blob, rowData);
                } else {
                    // Para otros navegadores
                    var url = URL.createObjectURL(blob);
                    var link = document.createElement('a');
                    link.href = url;
                    link.download = rowData; // Reemplaza con el nombre real del archivo
                    link.click();

                    // Liberar la URL del objeto después de la descarga
                    URL.revokeObjectURL(url);
                }
            },
            error: function (xhr, status, error) {
                // Maneja el error de la llamada AJAX si es necesario
                console.error(error);
            }
        });
    }

    function descargarPDF1() {
        $.ajax({
            url: '@Url.Action("OpenPdf1", "Pagoes")', // Reemplaza "TuControlador" con el nombre real de tu controlador
            type: 'GET',
            data: { pago: rowData2 },
            success: function (result) {
                var blob = new Blob([result], { type: 'application/txt' });

                // Verificar el navegador y crear un enlace para descargar el archivo
                if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                    // Para Internet Explorer o Microsoft Edge
                    window.navigator.msSaveOrOpenBlob(blob, rowData2);
                } else {
                    // Para otros navegadores
                    var url = URL.createObjectURL(blob);
                    var link = document.createElement('a');
                    link.href = url;
                    link.download = rowData2; // Reemplaza con el nombre real del archivo
                    link.click();

                    // Liberar la URL del objeto después de la descarga
                    URL.revokeObjectURL(url);
                }
            },
            error: function (xhr, status, error) {
                // Maneja el error de la llamada AJAX si es necesario
                console.error(error);
            }
        });
    }

    function descargarPDF2() {
        $.ajax({
            url: '@Url.Action("OpenPdf2", "Pagoes")', // Reemplaza "TuControlador" con el nombre real de tu controlador
            type: 'GET',
            data: { pago: rowData3 },
            success: function (result) {
                var blob = new Blob([result], { type: 'application/txt' });

                // Verificar el navegador y crear un enlace para descargar el archivo
                if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                    // Para Internet Explorer o Microsoft Edge
                    window.navigator.msSaveOrOpenBlob(blob, rowData3);
                } else {
                    // Para otros navegadores
                    var url = URL.createObjectURL(blob);
                    var link = document.createElement('a');
                    link.href = url;
                    link.download = rowData3; // Reemplaza con el nombre real del archivo
                    link.click();

                    // Liberar la URL del objeto después de la descarga
                    URL.revokeObjectURL(url);
                }
            },
            error: function (xhr, status, error) {
                // Maneja el error de la llamada AJAX si es necesario
                console.error(error);
            }
        });
    }
</script>


