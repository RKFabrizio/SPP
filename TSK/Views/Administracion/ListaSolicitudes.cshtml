
@{
    ViewData["Title"] = "ListaSolicitudes";
    Layout = "~/Views/Shared/_LayoutApp.cshtml";
}

<style>
    .user-icon-container {
        display: flex;
        align-items: center;
    }

        .user-icon-container .icon-tabler {
            margin-right: 10px;
            width: 50px;
            height: 50px;
        }

        .user-icon-container .page-title {
            margin-left: -4px;
        }

    .page-title {
        color: #a79a66;
    }

</style>

@section PagePreTitle{

    <div class="col">
        <!-- Page pre-title -->
        <div class="user-icon-container">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-user-circle" viewBox="0 0 24 24" stroke-width="1" stroke="#a79a66" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <circle cx="12" cy="12" r="9" />
                <circle cx="12" cy="10" r="3" />
                <path d="M6.168 18.849a4 4 0 0 1 3.832 -2.849h4a4 4 0 0 1 3.834 2.855" />
            </svg>
            <h2 class="page-title">
                Lista de Solicitudes
            </h2>
        </div>
    </div>
}

@section PageActions{

}

<div class="row row-cards">
    <div class="col-md-12">
        <div class="form-group mb-3">
            <div class='form-control'>
                <div class="col-md-12">

                    @(Html.DevExtreme().TabPanel()

                        .Items(items =>
                        {

                            items.Add()
                            .Title("Lista de Solicitudes Personalizado")
                            .Template(new TemplateName("TAB1"));
                            items.Add()
                            .Title("Lista de Solicitudes por Defecto")
                            .Template(new TemplateName("TAB2"));

                        })
                        .SelectedIndex(0)
                        .Loop(false)
                        .AnimationEnabled(true)
                        .SwipeEnabled(true)
                        )
                </div>
            </div>
        </div>
    </div>
</div>

@using (Html.DevExtreme().NamedTemplate("TAB1"))
{
    @(Html.DevExtreme().DataGrid<SPP.Models.Entity.Pago>()
    .DataSource(ds => ds.Mvc()
        .Controller("PagoAdmin2")
        .LoadAction("Get")
        .Key("IdPago")
    )
    .RemoteOperations(true)
    .Columns(columns => {

            columns.AddFor(m => m.IdPago).Caption("Nro de Solicitud").Width(120);

            columns.AddFor(m => m.IdTipoAdelanto).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("PagoAdmin2").LoadAction("TipoAdelantosLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Tipo de Solicitud").Width(125);

            columns.AddFor(m => m.IdProveedor).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("PagoAdmin2").LoadAction("ProveedoresLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Proveedor").Width(250);

            columns.AddFor(m => m.IdTipoMoneda).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("PagoAdmin2").LoadAction("TipoMonedasLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Moneda").Width(80);

            columns.AddFor(m => m.Importe).Caption("Importe").DataType(GridColumnDataType.Number).Format(c => c
                .Type(Format.FixedPoint)
                .Precision(2)
            ).Width(120);

            columns.AddFor(m => m.Concepto).Width(200);

            columns.AddFor(m => m.LoginSolicitante).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("PagoAdmin2").LoadAction("UsuariosLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Solicitante");

            columns.AddFor(m => m.LoginAprobador).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("PagoAdmin2").LoadAction("AprobadorAreasLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Aprobador");

            columns.AddFor(m => m.IdEstado).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("PagoAdmin2").LoadAction("EstadosLookup").Key("Value"))
                    .ValueExpr("Value")
                    .DisplayExpr("Text")
                ).Caption("Estado");

            columns.AddFor(m => m.IdTipoPago).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("PagoAdmin2").LoadAction("TipoPagosLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).HidingPriority(8).Caption("Tipo Pago");

            columns.AddFor(m => m.Observaciones).HidingPriority(1);

            columns.AddFor(m => m.InformacionContable).HidingPriority(2).Caption("Información Contable");

            columns.AddFor(m => m.CuentaBancaria).HidingPriority(3).Caption("Cuenta Bancaria");

            columns.AddFor(m => m.BeneficiarioNombre).HidingPriority(4).Caption("Beneficiario Nombre");

            columns.AddFor(m => m.IdBanco).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("PagoAdmin2").LoadAction("BancosLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).HidingPriority(5).Caption("Banco");

            columns.AddFor(m => m.IdTipoCuenta).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("PagoAdmin2").LoadAction("TipoCuentasLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).HidingPriority(6).Caption("Tipo Cuenta");
    })
)
}

@using (Html.DevExtreme().NamedTemplate("TAB2"))
{
    @(Html.DevExtreme().DataGrid<SPP.Models.Entity.Pago>()
        .DataSource(ds => ds.Mvc()
            .Controller("PagoAdmin")
            .LoadAction("Get")
            .Key("IdPago")
        )
        .RemoteOperations(true)
        .Columns(columns =>
        {

            columns.AddFor(m => m.IdPago).Caption("Nro de Solicitud").Width(120);

            columns.AddFor(m => m.IdTipoAdelanto).Lookup(lookup => lookup
                    .DataSource(ds => ds.WebApi().Controller("PagoAdmin").LoadAction("TipoAdelantosLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Tipo de Solicitud").Width(125);

            columns.AddFor(m => m.IdProveedor).Lookup(lookup => lookup
                    .DataSource(ds => ds.WebApi().Controller("PagoAdmin").LoadAction("ProveedoresLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Proveedor").Width(250);

            columns.AddFor(m => m.IdTipoMoneda).Lookup(lookup => lookup
                    .DataSource(ds => ds.WebApi().Controller("PagoAdmin").LoadAction("TipoMonedasLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Moneda").Width(80);

            columns.AddFor(m => m.Importe).Caption("Importe").DataType(GridColumnDataType.Number).Format(c => c
                .Type(Format.FixedPoint)
                .Precision(2)
            ).Width(120);

            columns.AddFor(m => m.Concepto).Width(200);

            columns.AddFor(m => m.LoginSolicitante).Lookup(lookup => lookup
                    .DataSource(ds => ds.WebApi().Controller("PagoAdmin").LoadAction("UsuariosLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Solicitante");

            columns.AddFor(m => m.LoginAprobador).Lookup(lookup => lookup
                    .DataSource(ds => ds.WebApi().Controller("PagoAdmin").LoadAction("AprobadorAreasLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Aprobador");

            columns.AddFor(m => m.IdEstado).Lookup(lookup => lookup
                    .DataSource(ds => ds.WebApi().Controller("PagoAdmin").LoadAction("EstadosLookup").Key("Value"))
                    .ValueExpr("Value")
                    .DisplayExpr("Text")
                ).Caption("Estado");

            columns.AddFor(m => m.IdTipoPago).Lookup(lookup => lookup
                    .DataSource(ds => ds.WebApi().Controller("PagoAdmin").LoadAction("TipoPagosLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).HidingPriority(8).Caption("Tipo Pago");

            columns.AddFor(m => m.Observaciones).HidingPriority(1);

            columns.AddFor(m => m.InformacionContable).HidingPriority(2).Caption("Información Contable");

            columns.AddFor(m => m.CuentaBancaria).HidingPriority(3).Caption("Cuenta Bancaria");

            columns.AddFor(m => m.BeneficiarioNombre).HidingPriority(4).Caption("Beneficiario Nombre");

            columns.AddFor(m => m.IdBanco).Lookup(lookup => lookup
                    .DataSource(ds => ds.WebApi().Controller("PagoAdmin").LoadAction("BancosLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).HidingPriority(5).Caption("Banco");

            columns.AddFor(m => m.IdTipoCuenta).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("PagoAdmin").LoadAction("TipoCuentasLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).HidingPriority(6).Caption("Tipo Cuenta");
        })
        .ShowBorders(true)
                .AllowColumnReordering(true)
                .RowAlternationEnabled(false)
                .ShowColumnLines(true)
                .ShowRowLines(true)
                .Paging(paging => paging.PageSize(20))
                .FilterRow(f => f.Visible(true))
                .Pager(pager =>
                {
                    pager.ShowPageSizeSelector(true);
                    pager.AllowedPageSizes(new[] { 20, 50, 100 });
                    pager.ShowInfo(true);
                })
                .SearchPanel(s => s
                    .Visible(true)
                    .HighlightCaseSensitive(true)
                )

    )
}




<script>
    function filterCheckboxValueChanged(e) {
        var dataGrid = $("#gridContainer").dxDataGrid("instance");
        dataGrid.refresh();
    }
</script>
