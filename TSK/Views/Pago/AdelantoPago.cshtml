

@{
    ViewData["Title"] = "AdelantoPago";
    Layout = "~/Views/Shared/_LayoutApp.cshtml";
}

@using DevExtreme.AspNet.Mvc;
@using DevExpress.AspNetCore;
@using Newtonsoft.Json;
@using Models;



<style>
    .user-icon-container {
        display: flex;
        align-items: center;
    }

        .user-icon-container .icon-tabler {
            margin-right: 10px;
            width: 50px;
            height: 50px;
        }

        .user-icon-container .page-title {
            margin-left: -4px;
        }

    .page-title {
        color: #a79a66;
    }

    .container{
        width: 85%;
        padding: 2%;
    }

</style>

@section PagePreTitle{

    <div class="col">
        <!-- Page pre-title -->
        <div class="user-icon-container">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-moneybag" width="32" height="32" viewBox="0 0 24 24" stroke-width="1.5" stroke="#a79a66" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M9.5 3h5a1.5 1.5 0 0 1 1.5 1.5a3.5 3.5 0 0 1 -3.5 3.5h-1a3.5 3.5 0 0 1 -3.5 -3.5a1.5 1.5 0 0 1 1.5 -1.5z" />
                <path d="M4 17v-1a8 8 0 1 1 16 0v1a4 4 0 0 1 -4 4h-8a4 4 0 0 1 -4 -4z" />
            </svg>
            <h2 class="page-title">
                Adelanto de Pago
            </h2>
        </div>
    </div>
}

@section PageActions{


}


<div class="row row-cards">
    <div class="col-md-12">
        <div class="form-group mb-3">
            <div class='form-control'>
                <div class="col-md-12">

                    @(Html.DevExtreme().TabPanel()

                        .Items(items =>
                        {

                            items.Add()
                            .Title("Cheque")
                            .Template(new TemplateName("TAB1"));
                            items.Add()
                            .Title("Abono en Cuenta")
                            .Template(new TemplateName("TAB2"));

                        })
                        .SelectedIndex(0)
                        .Loop(false)
                        .AnimationEnabled(true)
                        .SwipeEnabled(true)
                        )
                </div>
            </div>
        </div>
    </div>
</div>

@{
    var nombreUsuario = JsonConvert.DeserializeObject<Usuario>(User?.FindFirst("UsuarioInfo")?.Value)?.Nombre;
}

 
<div class="row">
    <div class="col-md-8">
        <!-- Aquí pones tu código de los formularios anteriores -->
        @using (Html.DevExtreme().NamedTemplate("TAB1"))
        {

            @using (Html.BeginForm("Post", "Pagoes", FormMethod.Post, new { id = "myForm1", @class = "myForm", enctype = "multipart/form-data" }))
            {

                <div class="container">

                    @(
                            Html.DevExtreme().Form<SPP.Models.Entity.Pago>()

                            .ColCount(2)
                            .Items(items =>
                            {
                      

                                items.AddSimpleFor(m => m.IdProveedor)
                            .Label(l => l.Text("Nombre de Proveedor y/o Beneficiario:"))
                            .Editor(e => e.SelectBox()
                            .DataSource(d => d.Mvc()
                            .Controller("Pagoes")
                            .LoadAction("ProveedoresLookup"))
                            .DisplayExpr("Text")
                            .ValueExpr("Value")
                            .SearchEnabled(true)
                            ).ColSpan(2);

                                items.AddSimpleFor(m => m.FechaSolicitud)
                            .ColSpan(2)
                            .Label(l => l.Text("Fecha y Hora de Solicitud:"))
                            .Editor(e => e.DateBox()
                            .Value(DateTime.Now)
                            .Disabled(true));


                                items.AddSimpleFor(m => m.Importe).Editor(e => e.NumberBox().OnValueChanged("guardarImporte"));

                                items.AddSimpleFor(m => m.IdTipoMoneda)
                            .Label(l => l.Text("Moneda:"))
                            .Editor(e => e.SelectBox()
                            .DataSource(d => d.Mvc()
                            .Controller("Pagoes")
                            .LoadAction("TipoMonedasLookup"))
                            .DisplayExpr("Text")
                            .ValueExpr("Value")

                            );

                                items.AddSimple()
                            .Label(l => l.Text("Sustento / Referencia OC:"))
                            .Template(
                            @<text>
                                @(
                            Html.DevExtreme().FileUploader()
                            .ID("fileUploaderRef")
                            .Name("ReferenciaOC")
                            .AllowedFileExtensions(new[] { ".txt", ".doc", ".docx", ".pdf" })
                            .UploadMode(FileUploadMode.UseForm)
                            .UploadUrl(Url.Action("UploadRef", "FileManagment"))
                            .ShowFileList(true)
                            .Multiple(true)
                            )
                                </text>
                            ).ColSpan(2);

                                items.AddSimple()
                            .Label(l => l.Text("Proformacotizacion:"))
                            .Template(
                            @<text>
                                @(
                            Html.DevExtreme().FileUploader()
                            .ID("fileUploaderProforma")
                            .Name("Proformacotizacion")
                            .AllowedFileExtensions(new[] { ".txt", ".doc", ".docx", ".pdf" })
                            .UploadMode(FileUploadMode.UseForm)
                            .UploadUrl(Url.Action("UploadProforma", "FileManagment"))
                            .ShowFileList(true)
                            .Multiple(true)
                            )
                                </text>
                            ).ColSpan(2);

                                items.AddSimple()
                            .Label(l => l.Text("Factura:"))
                            .Template(
                            @<text>
                                @(
                            Html.DevExtreme().FileUploader()
                            .ID("fileUploaderFactura")
                            .Name("Factura")
                            .AllowedFileExtensions(new[] { ".txt", ".doc", ".docx", ".pdf" })
                            .UploadMode(FileUploadMode.UseForm)
                            .UploadUrl(Url.Action("UploadFactura", "FileManagment"))
                            .ShowFileList(true)
                            .Multiple(true)
                            )
                                </text>
                            ).ColSpan(2);

                                items.AddSimpleFor(m => m.Concepto).ColSpan(2)
                            .Editor(e => e.TextArea().Height("50px"));

                                items.AddSimpleFor(m => m.InformacionContable).ColSpan(2)
                            .Editor(e => e.TextArea().Height("50px"));

                                items.AddSimpleFor(m => m.BeneficiarioDni).ColSpan(2).Label(l => l.Text("Beneficiario o Tramitador (DNI):"));

                                items.AddSimpleFor(m => m.Observaciones).ColSpan(2)
                            .Editor(e => e.TextArea().Height("50px"));

                                items.AddSimple()
                            .Label(l => l.Text("Solicitante:"))
                            .Template(
                            @<text>
                                @(Html.DevExtreme().TextBox()
                            .Value(nombreUsuario)
                            .ReadOnly(true))
                                </text>
                        )
                        .ColSpan(2);



                                items.AddButton()
                    .HorizontalAlignment(HorizontalAlignment.Center)
                    .ButtonOptions(b => b.Text("Enviar")
                    .Type(ButtonType.Default)
                    .UseSubmitBehavior(true)
                    ).ColSpan(2);
                            })
                        )
                </div>
            }
        }

        @using (Html.DevExtreme().NamedTemplate("TAB2"))
        {
            @using (Html.BeginForm("Post2", "Pagoes", FormMethod.Post, new { id = "myForm2", @class = "myForm", enctype = "multipart/form-data" }))
            {
                <div class="container">
                    @(
                            Html.DevExtreme().Form<SPP.Models.Entity.Pago>()

                            .ColCount(2)
                            .Items(items =>
                            {
                               

                                items.AddSimpleFor(m => m.IdProveedor)
                            .Label(l => l.Text("Nombre de Proveedor y/o Beneficiario:"))
                            .Editor(e => e.SelectBox()
                            .DataSource(d => d.Mvc()
                            .Controller("Pagoes")
                            .LoadAction("ProveedoresLookup"))
                            .DisplayExpr("Text")
                            .ValueExpr("Value")
                            .SearchEnabled(true)
                            ).ColSpan(2);

                                items.AddSimpleFor(m => m.FechaSolicitud)
                            .ColSpan(2)
                            .Label(l => l.Text("Fecha y Hora:"))
                            .Editor(e => e.DateBox()
                            .Value(DateTime.Now)
                            .Disabled(true));


                                items.AddSimpleFor(m => m.Importe).Editor(e => e.NumberBox().OnValueChanged("guardarImporte"));

                                items.AddSimpleFor(m => m.IdTipoMoneda)
                            .Label(l => l.Text("Moneda:"))
                            .Editor(e => e.SelectBox()
                            .DataSource(d => d.Mvc()
                            .Controller("Pagoes")
                            .LoadAction("TipoMonedasLookup"))
                            .DisplayExpr("Text")
                            .ValueExpr("Value")

                            );

                                items.AddSimple()
                            .Label(l => l.Text("Sustento / Referencia OC:"))
                            .Template(
                            @<text>
                                @(
                            Html.DevExtreme().FileUploader()
                            .ID("fileUploaderRef1")
                            .Name("ReferenciaOC")
                            .AllowedFileExtensions(new[] { ".txt", ".doc", ".docx", ".pdf" })
                            .UploadMode(FileUploadMode.UseForm)
                            .UploadUrl(Url.Action("UploadRef", "FileManagment"))
                            .ShowFileList(true)
                            .Multiple(true)
                            )
                                </text>
                            );

                                items.AddSimple()
                            .Label(l => l.Text("Proformacotizacion:"))
                            .Template(
                            @<text>
                                @(
                            Html.DevExtreme().FileUploader()
                            .ID("fileUploaderProforma1")
                            .Name("Proformacotizacion")
                            .AllowedFileExtensions(new[] { ".txt", ".doc", ".docx", ".pdf" })
                            .UploadMode(FileUploadMode.UseForm)
                            .UploadUrl(Url.Action("UploadProforma", "FileManagment"))
                            .ShowFileList(true)
                            .Multiple(true)
                            )
                                </text>
                            );

                                items.AddSimple()
                            .Label(l => l.Text("Factura:"))
                            .Template(
                            @<text>
                                @(
                            Html.DevExtreme().FileUploader()
                            .ID("fileUploaderFactura1")
                            .Name("Factura")
                            .AllowedFileExtensions(new[] { ".txt", ".doc", ".docx", ".pdf" })
                            .UploadMode(FileUploadMode.UseForm)
                            .UploadUrl(Url.Action("UploadFactura", "FileManagment"))
                            .ShowFileList(true)
                            .Multiple(true)
                            )
                                </text>
                            ).ColSpan(2);

                                items.AddSimpleFor(m => m.Concepto).ColSpan(2)
                            .Editor(e => e.TextArea().Height("50px"));



                                items.AddGroup().Caption("Datos de Pago").Items(paymentDataItems =>
                            {

                                items.AddSimpleFor(m => m.IdBanco)
                            .Label(l => l.Text("Nombre de Banco:"))
                            .Editor(e => e.SelectBox()
                            .DataSource(d => d.Mvc()
                            .Controller("Pagoes")
                            .LoadAction("BancosLookup"))
                            .DisplayExpr("Text")
                            .ValueExpr("Value")

                            );

                                items.AddSimpleFor(m => m.IdTipoCuenta)
                            .Label(l => l.Text("Tipo cuenta:"))
                            .Editor(e => e.SelectBox()
                            .DataSource(d => d.Mvc()
                            .Controller("Pagoes")
                            .LoadAction("TipoCuentasLookup"))
                            .DisplayExpr("Text")
                            .ValueExpr("Value")
                            );

                                items.AddSimpleFor(m => m.CuentaBancaria).ColSpan(2).Label(l => l.Text("Cuenta Bancaria o CCI:"));

                            }).ColSpan(2);

                                items.AddSimpleFor(m => m.InformacionContable).ColSpan(2)
                            .Editor(e => e.TextArea().Height("50px"));

                                items.AddSimpleFor(m => m.Observaciones).ColSpan(2)
                            .Editor(e => e.TextArea().Height("50px"));


                                items.AddSimple()
                            .Label(l => l.Text("Solicitante:"))
                            .Template(
                            @<text>
                                @(Html.DevExtreme().TextBox()
                            .Value(nombreUsuario)
                            .ReadOnly(true))
                                </text>
                        )
                        .ColSpan(2);



                                items.AddButton()
                    .HorizontalAlignment(HorizontalAlignment.Center)
                    .ButtonOptions(b => b.Text("Guardar")
                    .Type(ButtonType.Default)
                    .UseSubmitBehavior(true)
                    ).ColSpan(2);

                            })
                        )


                </div>
            }
        }
    </div>

    <div class="col-md-4">
        <!-- Aquí pones tu código del último bloque -->
        <div>
            <div class="form-group">
                <label for="proveedor">Aprobador:</label>
                <span id="proveedor" class="form-control"></span>
            </div>
            <div class="form-group">
                <label for="beneficiarioDni">Monto (Max Aprobación):</label>
                <span id="Importe" class="form-control"></span>
            </div>
        </div>
    </div>
</div>

 
<script>

    function guardarImporte(e) {

        $.ajax({
            url: '@Url.Action("AprobadorNombre", "Pagoes")',
            type: 'GET',
            data: { Importe: e.value },
            success: function (response) {
                document.getElementById("proveedor").textContent = response.proveedor;
                document.getElementById("Importe").textContent = response.importe;
                //document.getElementById("correo").textContent = response.correo;
            }
        });

    }


    $(document).on('submit', '.myForm', function (e) {

        e.preventDefault();

        var form = $(this);
        var url = form.attr('action');

        // Desactivar el botón de envío
        form.find(':submit').prop('disabled', true);

        var formData = new FormData(form[0]); // Construir objeto FormData

        $.ajax({
            type: 'POST',
            url: url,
            data: formData,
            processData: false, // Importante: desactivar la serialización automática de datos
            contentType: false, // Importante: desactivar el encabezado Content-Type
            success: function (response) {
                // Aquí, "response" es el objeto JSON que devuelve tu controlador
                // En lugar de la alerta, mostramos el Toast
                DevExpress.ui.notify('Tu solicitud fue enviada exitosamente\nNro de Solicitud: ' + response.IdPago, 'success', 6000);

                // Reactivar el botón de envío
                form.find(':submit').prop('disabled', false);

                // Limpiar el formulario
                form[0].reset();
            },
            error: function () {
                // También puedes mostrar un Toast para los errores
                DevExpress.ui.notify('Hubo un error al enviar la solicitud.', 'error', 6000);

                // Reactivar el botón de envío
                form.find(':submit').prop('disabled', false);
            }
        });
    });

 

</script>


