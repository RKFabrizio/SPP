@(Html.DevExtreme().DataGrid<SPP.Models.Entity.Pago>()
    .DataSource(ds => ds.Mvc()
        .Controller("PagoPendienteAprobacion")
        .LoadAction("Get")
        .Key("IdPago")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.IdPago).Caption("Nro de Solicitud").Width(120);

        columns.AddFor(m => m.IdTipoAdelanto).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("TipoAdelantosLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).Caption("Tipo de Solicitud").Width(125);

        columns.AddFor(m => m.IdProveedor).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("ProveedoresLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).Caption("Proveedor").Width(250);

        columns.AddFor(m => m.IdTipoMoneda).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("TipoMonedasLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).Caption("Moneda").Width(80);

        columns.AddFor(m => m.Importe).Caption("Importe").DataType(GridColumnDataType.Number).Format(c => c
            .Type(Format.FixedPoint)
            .Precision(2)
        ).Width(120);

        columns.AddFor(m => m.Concepto).Width(200);

        columns.AddFor(m => m.LoginSolicitante).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("UsuariosLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).Caption("Solicitante");

        columns.AddFor(m => m.LoginAprobador).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("AprobadorAreasLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).Caption("Aprobador");

        columns.AddFor(m => m.IdEstado).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("EstadosLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Estado");
        
        columns.AddFor(m => m.IdTipoPago).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("TipoPagosLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).HidingPriority(8).Caption("Tipo Pago");

        columns.AddFor(m => m.Observaciones).HidingPriority(1);

        columns.AddFor(m => m.InformacionContable).HidingPriority(2).Caption("InformaciÃ³n Contable");

        columns.AddFor(m => m.CuentaBancaria).HidingPriority(3).Caption("Cuenta Bancaria");

        columns.AddFor(m => m.BeneficiarioNombre).HidingPriority(4).Caption("Beneficiario Nombre");

        columns.AddFor(m => m.IdBanco).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("BancosLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).HidingPriority(5).Caption("Banco");

        columns.AddFor(m => m.IdTipoCuenta).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("PagoPendienteAprobacion").LoadAction("TipoCuentasLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).HidingPriority(6).Caption("Tipo Cuenta");

       columns.Add()
        .Caption("Referencia OC")
        .CellTemplate(
            @<text>
                 @Html.ActionLink("Referencias", "OpenPdf", "Pagoes", new { pago = 100 })
            </text>
        );

       

    })
     .ShowBorders(true)
            .AllowColumnReordering(true)
            .RowAlternationEnabled(false)
            .ShowColumnLines(true)
            .ShowRowLines(true)
            .Paging(paging => paging.PageSize(20))
            .FilterRow(f => f.Visible(true))
            .Pager(pager =>
            {
                pager.ShowPageSizeSelector(true);
                pager.AllowedPageSizes(new[] { 20, 50, 100 });
                pager.ShowInfo(true);
            })
            .SearchPanel(s => s
                .Visible(true)
                .HighlightCaseSensitive(true)
            )
)
